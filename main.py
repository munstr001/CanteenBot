import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–ª–æ–≤—ã—Ö (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
canteens = {
    "stol1": {"name": "–°—Ç–æ–ª–æ–≤–∞—è ‚Ññ1", "max": 100, "current": 100},
    "stol2": {"name": "–°—Ç–æ–ª–æ–≤–∞—è ‚Ññ2", "max": 200, "current": 25},
    "stol3": {"name": "–°—Ç–æ–ª–æ–≤–∞—è ‚Ññ3", "max": 300, "current": 100},
}


def get_load_icon(current: int, max_count: int) -> str:
    if max_count == 0:
        return "‚ö™"
    percent = (current / max_count) * 100
    if percent < 50:
        return "üü¢"
    elif percent < 80:
        return "üü°"
    else:
        return "üî¥"


def get_best_canteen() -> str:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã?
    all_full = all(
        (canteens[k]["current"] / canteens[k]["max"]) >= 1
        if canteens[k]["max"] > 0 else True
        for k in canteens
    )
    if all_full:
        return "‚ö†Ô∏è –í—Å–µ —Å—Ç–æ–ª–æ–≤—ã–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!"

    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
    loads = {
        k: (canteens[k]["current"] / canteens[k]["max"]) * 100 if canteens[k]["max"] > 0 else 999
        for k in canteens
    }

    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
    min_percent = min(loads.values())

    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã ‚Äî —Ç–µ, —É –∫–æ–≥–æ —Ä–∞–∑–Ω–∏—Ü–∞ —Å –º–∏–Ω–∏–º—É–º–æ–º <=2%
    candidates = [k for k, v in loads.items() if abs(v - min_percent) <= pc]

    # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Üí –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    best_key = max(candidates, key=lambda k: canteens[k]["max"])

    data = canteens[best_key]
    percent = loads[best_key]
    return f"üëâ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º {data['name']} (—Å–≤–æ–±–æ–¥–Ω–æ {data['max'] - data['current']} –º–µ—Å—Ç)"


def format_canteens() -> str:
    lines = [get_best_canteen()]
    for key, data in canteens.items():
        percent = (data["current"] / data["max"]) * 100 if data["max"] > 0 else 0
        icon = get_load_icon(data["current"], data["max"])
        lines.append(
            f"\n{icon} {data['name']}\n"
            f"–õ—é–¥–µ–π —Å–µ–π—á–∞—Å: {data['current']} / {data['max']}\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {percent:.1f}%"
        )
    return "\n".join(lines)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(format_canteens())


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    await message.answer(format_canteens())


@dp.message(Command("set"))
async def set_canteen_load(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <–Ω–æ–º–µ—Ä_—Å—Ç–æ–ª–æ–≤–æ–π> <–∫–æ–ª-–≤–æ_–ª—é–¥–µ–π>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set stol1 120")
        return

    key, current = parts[1], parts[2]
    if key not in canteens:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç–æ–ª–æ–≤–æ–π.")
        return

    try:
        current = int(current)
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if current < 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        return

    # —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ, –¥–∞–∂–µ –±–æ–ª—å—à–µ max
    canteens[key]["current"] = current
    percent = (current / canteens[key]["max"]) * 100 if canteens[key]["max"] > 0 else 0
    await message.answer(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {canteens[key]['name']} ‚Äî {current}/{canteens[key]['max']} "
        f"(–∑–∞–Ω—è—Ç–æ {percent:.1f}%)"
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())